// Generated by gencpp from file van_loading/ICPDirection.msg
// DO NOT EDIT!


#ifndef VAN_LOADING_MESSAGE_ICPDIRECTION_H
#define VAN_LOADING_MESSAGE_ICPDIRECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace van_loading
{
template <class ContainerAllocator>
struct ICPDirection_
{
  typedef ICPDirection_<ContainerAllocator> Type;

  ICPDirection_()
    : x(0.0)
    , y(0.0)
    , angle(0.0)  {
    }
  ICPDirection_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::van_loading::ICPDirection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::van_loading::ICPDirection_<ContainerAllocator> const> ConstPtr;

}; // struct ICPDirection_

typedef ::van_loading::ICPDirection_<std::allocator<void> > ICPDirection;

typedef boost::shared_ptr< ::van_loading::ICPDirection > ICPDirectionPtr;
typedef boost::shared_ptr< ::van_loading::ICPDirection const> ICPDirectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::van_loading::ICPDirection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::van_loading::ICPDirection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace van_loading

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'double_ackermann': ['/home/matt/Documents/Robot-transporting/workspace/src/double_ackermann/trunk/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'van_loading': ['/home/matt/Documents/Robot-transporting/workspace/src/van_loading/msg', '/home/matt/Documents/Robot-transporting/workspace/src/van_loading/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::van_loading::ICPDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::van_loading::ICPDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::van_loading::ICPDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::van_loading::ICPDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::van_loading::ICPDirection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::van_loading::ICPDirection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::van_loading::ICPDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39617ea5ffa910b78cdf07b659b77ce4";
  }

  static const char* value(const ::van_loading::ICPDirection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39617ea5ffa910b7ULL;
  static const uint64_t static_value2 = 0x8cdf07b659b77ce4ULL;
};

template<class ContainerAllocator>
struct DataType< ::van_loading::ICPDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "van_loading/ICPDirection";
  }

  static const char* value(const ::van_loading::ICPDirection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::van_loading::ICPDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# x distance (forward/back)\n\
float32 x\n\
\n\
# y distance (left/right)\n\
float32 y\n\
\n\
# angle to turn, positive to right, degrees\n\
float32 angle\n\
";
  }

  static const char* value(const ::van_loading::ICPDirection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::van_loading::ICPDirection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ICPDirection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::van_loading::ICPDirection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::van_loading::ICPDirection_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VAN_LOADING_MESSAGE_ICPDIRECTION_H
