// Generated by gencpp from file double_ackermann/DoubleAckermann.msg
// DO NOT EDIT!


#ifndef DOUBLE_ACKERMANN_MESSAGE_DOUBLEACKERMANN_H
#define DOUBLE_ACKERMANN_MESSAGE_DOUBLEACKERMANN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace double_ackermann
{
template <class ContainerAllocator>
struct DoubleAckermann_
{
  typedef DoubleAckermann_<ContainerAllocator> Type;

  DoubleAckermann_()
    : speed(0.0)
    , steering(0.0)
    , ackermann(0)  {
    }
  DoubleAckermann_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , steering(0.0)
    , ackermann(0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef float _steering_type;
  _steering_type steering;

   typedef int8_t _ackermann_type;
  _ackermann_type ackermann;





  typedef boost::shared_ptr< ::double_ackermann::DoubleAckermann_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::double_ackermann::DoubleAckermann_<ContainerAllocator> const> ConstPtr;

}; // struct DoubleAckermann_

typedef ::double_ackermann::DoubleAckermann_<std::allocator<void> > DoubleAckermann;

typedef boost::shared_ptr< ::double_ackermann::DoubleAckermann > DoubleAckermannPtr;
typedef boost::shared_ptr< ::double_ackermann::DoubleAckermann const> DoubleAckermannConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::double_ackermann::DoubleAckermann_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace double_ackermann

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'double_ackermann': ['/home/matt/Documents/Robot-transporting/workspace/src/double_ackermann/trunk/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::double_ackermann::DoubleAckermann_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::double_ackermann::DoubleAckermann_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::double_ackermann::DoubleAckermann_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14ebedf9d70c67329e96a47f57b9ca37";
  }

  static const char* value(const ::double_ackermann::DoubleAckermann_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14ebedf9d70c6732ULL;
  static const uint64_t static_value2 = 0x9e96a47f57b9ca37ULL;
};

template<class ContainerAllocator>
struct DataType< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >
{
  static const char* value()
  {
    return "double_ackermann/DoubleAckermann";
  }

  static const char* value(const ::double_ackermann::DoubleAckermann_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# speed, positive forward, m/s\n\
float32 speed\n\
\n\
# steering, positive to the right, radians\n\
float32 steering\n\
\n\
# Four ackermann modes are available:\n\
# - 0: double ackermann (default),\n\
# - 1: crabbing (front and back in the same direction).\n\
# - 2: front ackermann.\n\
# - 3: back ackermann.\n\
int8 ackermann\n\
";
  }

  static const char* value(const ::double_ackermann::DoubleAckermann_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.steering);
      stream.next(m.ackermann);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DoubleAckermann_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::double_ackermann::DoubleAckermann_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::double_ackermann::DoubleAckermann_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "ackermann: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ackermann);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOUBLE_ACKERMANN_MESSAGE_DOUBLEACKERMANN_H
